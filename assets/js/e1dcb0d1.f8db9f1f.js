"use strict";(self.webpackChunkguide_pycord_dev=self.webpackChunkguide_pycord_dev||[]).push([[2383],{8624:function(e,n,t){t.d(n,{v:function(){return i}});var o=t(7294),a=t(7674),i=Object.assign({},a.TW,{profiles:{bob:{author:"BobDotCom",avatar:"/img/bob.png",roleColor:"#2cd6f7"},robocord:{author:"Robocord",avatar:"/img/robocord.png",roleColor:"#9b59b6",bot:!0},dorukyum:{author:"Dorukyum",avatar:"/img/dorukyum.png",roleColor:"#2cd6f7"}}});n.Z=function(e){var n=e.options,t=void 0===n?i:n,l=e.children;return o.createElement(a.qs.Provider,{value:t},o.createElement(a.dZ,null,l))}},3792:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return d},default:function(){return v},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return m}});var o=t(7462),a=t(3366),i=(t(7294),t(3905)),l=t(7674),r=t(8624),s=["components"],c={title:"Wavelink Audio Player"},d="About",u={unversionedId:"voice/playing",id:"voice/playing",title:"Wavelink Audio Player",description:"Pycord and Wavelink try to keep the playing of audio as simple and easy as possible, to keep making Discord",source:"@site/docs/voice/playing.mdx",sourceDirName:"voice",slug:"/voice/playing",permalink:"/voice/playing",draft:!1,editUrl:"https://github.com/Pycord-Development/guide/tree/main/docs/voice/playing.mdx",tags:[],version:"current",lastUpdatedBy:"Lala Sabathil",lastUpdatedAt:1713441056,formattedLastUpdatedAt:"Apr 18, 2024",frontMatter:{title:"Wavelink Audio Player"},sidebar:"defaultSidebar",previous:{title:"Voice",permalink:"/voice/"},next:{title:"Receiving Voice Samples",permalink:"/voice/receiving"}},p={},m=[{value:"Starting out",id:"starting-out",level:2},{value:"Making a play command",id:"making-a-play-command",level:3},{value:"Adding connect events",id:"adding-connect-events",level:3}],y={toc:m},k="wrapper";function v(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)(k,(0,o.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"about"},"About"),(0,i.kt)("p",null,"Pycord and Wavelink try to keep the playing of audio as simple and easy as possible, to keep making Discord\nbots of any kind easy for all audiences. This guide provides simple and easy examples of using the\naudio playing feature."),(0,i.kt)("p",null,"For users that want extra examples, you can find some in Pycord's\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Pycord-Development/pycord/blob/master/examples/"},"GitHub repository"),"."),(0,i.kt)("h2",{id:"starting-out"},"Starting out"),(0,i.kt)("p",null,"First you need to run a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/freyacodes/Lavalink"},"Lavalink Server")," to connect with.\nThere a multiple documentations to do this, so we are not covering that here."),(0,i.kt)("p",null,"You also need to install the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/PythonistaGuild/Wavelink"},"wavelink")," library."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="Installing wavelink"',title:'"Installing','wavelink"':!0},"python3 -m pip install wavelink\n")),(0,i.kt)("p",null,"You will now want to connect to your server via a node."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="Connect Node with Lavalink"',title:'"Connect',Node:!0,with:!0,'Lavalink"':!0},'import discord\nimport wavelink\n\nbot = discord.Bot()\n\nasync def connect_nodes():\n  """Connect to our Lavalink nodes."""\n  await bot.wait_until_ready() # wait until the bot is ready\n\n  nodes = [\n    wavelink.Node(\n      identifier="Node1", # This identifier must be unique for all the nodes you are going to use\n      uri="http://0.0.0.0:443", # Protocol (http/s) is required, port must be 443 as it is the one lavalink uses\n      password="youshallnotpass"\n    )\n  ]\n\n  await wavelink.Pool.connect(nodes=nodes, client=bot) # Connect our nodes\n')),(0,i.kt)("br",null),(0,i.kt)("p",null,"Now you are finished making your node! Next, you will want to:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Making a play command"),(0,i.kt)("li",{parentName:"ol"},"Adding connect events")),(0,i.kt)("h3",{id:"making-a-play-command"},"Making a play command"),(0,i.kt)("p",null,"To make a play command, you will need to make a function to connect and play audio in a voice channel."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="Play Command Example"',title:'"Play',Command:!0,'Example"':!0},'import typing\n\n@bot.slash_command(name="play")\nasync def play(ctx, search: str):\n  # First we may define our voice client,\n  # for this, we are going to use typing.cast()\n  # function just for the type checker know that\n  # `ctx.voice_client` is going to be from type\n  # `wavelink.Player`\n  vc = typing.cast(wavelink.Player, ctx.voice_client)\n\n  if not vc: # We firstly check if there is a voice client\n    vc = await ctx.author.voice.channel.connect(cls=wavelink.Player) # If there isn\'t, we connect it to the channel\n\n  # Now we are going to check if the invoker of the command\n  # is in the same voice channel than the voice client, when defined.\n  # If not, we return an error message.\n  if ctx.author.voice.channel.id != vc.channel.id:\n    return await ctx.respond("You must be in the same voice channel as the bot.")\n\n  # Now we search for the song. You can optionally\n  # pass the "source" keyword, of type "wavelink.TrackSource"\n  song = await wavelink.Playable.search(search)\n\n  if not song: # In case the song is not found\n    return await ctx.respond("No song found.") # we return an error message\n\n  await vc.play(song) # Else, we play it\n  await ctx.respond(f"Now playing: `{song.title}`") # and return a success message\n')),(0,i.kt)(r.Z,{mdxType:"DiscordComponent"},(0,i.kt)(l.kK,{profile:"robocord",mdxType:"DiscordMessage"},(0,i.kt)("div",{slot:"interactions"},(0,i.kt)(l.un,{profile:"bob",command:!0,mdxType:"DiscordInteraction"},"play")),"Now playing:  ",(0,i.kt)("code",null,"Never Gonna Give You Up"))),(0,i.kt)("br",null),(0,i.kt)("p",null,"Now that you've done this, the only thing left to do is make your connect events."),(0,i.kt)("h3",{id:"adding-connect-events"},"Adding connect events"),(0,i.kt)("p",null,"The final step to this guide is connecting the node to your server when the bot goes online."),(0,i.kt)("p",null,"To make it, you will want to do the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="Adding connect events"',title:'"Adding',connect:!0,'events"':!0},'@bot.event\nasync def on_ready():\n  await connect_nodes() # connect to the server\n\n@bot.event\nasync def on_wavelink_node_ready(payload: wavelink.NodeReadyEventPayload):\n  # Everytime a node is successfully connected, we\n  # will print a message letting it know.\n  print(f"Node with ID {payload.session_id} has connected")\n  print(f"Resumed session: {payload.resumed}")\n\nbot.run("token")\n')),(0,i.kt)("p",null,"Congratulations! You have now implemented voice playing into your bot! Most bots and Discord API\nwrappers don't have this as a feature, so this is quite an accomplishment. Thankfully, Pycord makes\nit easy to make complex bots so that you can get even the most advanced of ideas down."),(0,i.kt)("admonition",{title:"Related Topics",type:"info"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../getting-started/rules-and-common-practices"},"Rules and Common Practices")))))}v.isMDXComponent=!0}}]);