"use strict";(self.webpackChunkguide_pycord_dev=self.webpackChunkguide_pycord_dev||[]).push([[5519],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return f}});var o=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,o,a=function(n,e){if(null==n)return{};var t,o,a={},i=Object.keys(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var c=o.createContext({}),l=function(n){var e=o.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},p=function(n){var e=l(n.components);return o.createElement(c.Provider,{value:e},n.children)},m="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,c=n.parentName,p=s(n,["components","mdxType","originalType","parentName"]),m=l(t),d=a,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return t?o.createElement(f,r(r({ref:e},p),{},{components:t})):o.createElement(f,r({ref:e},p))}));function f(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,r=new Array(i);r[0]=d;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=n,s[m]="string"==typeof n?n:a,r[1]=s;for(var l=2;l<i;l++)r[l]=t[l];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7708:function(n,e,t){t.r(e),t.d(e,{assets:function(){return p},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return m}});var o=t(7462),a=t(3366),i=(t(7294),t(3905)),r=["components"],s={title:"Localizations",description:"Localizations are a way to make your bot more accessible to your users. Learn all about localizations now!"},c=void 0,l={unversionedId:"interactions/application-commands/localizations",id:"interactions/application-commands/localizations",title:"Localizations",description:"Localizations are a way to make your bot more accessible to your users. Learn all about localizations now!",source:"@site/docs/interactions/application-commands/localizations.mdx",sourceDirName:"interactions/application-commands",slug:"/interactions/application-commands/localizations",permalink:"/interactions/application-commands/localizations",draft:!1,editUrl:"https://github.com/Pycord-Development/guide/tree/main/docs/interactions/application-commands/localizations.mdx",tags:[],version:"current",lastUpdatedBy:"Lala Sabathil",lastUpdatedAt:1713441056,formattedLastUpdatedAt:"Apr 18, 2024",frontMatter:{title:"Localizations",description:"Localizations are a way to make your bot more accessible to your users. Learn all about localizations now!"},sidebar:"defaultSidebar",previous:{title:"Context Menus",permalink:"/interactions/application-commands/context-menus"},next:{title:"Slash Commands",permalink:"/interactions/application-commands/slash-commands"}},p={},m=[{value:"Syntax",id:"syntax",level:2}],u={toc:m},d="wrapper";function f(n){var e=n.components,t=(0,a.Z)(n,r);return(0,i.kt)(d,(0,o.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Localizations are a way to make your bot more accessible to your users. You can localize the command\nname, the names of any arguments, and any text that is displayed to the user."),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'@bot.slash_command(\n    name="ping",\n    name_localizations={\n        "en-GB": "British_Ping"\n    },\n    description="Ping the bot",\n    description_localizations={\n        "en-GB": "British ping the bot"\n    },\n    options=[\n        Option(\n            name="Example",\n            name_localizations={\n                "en-GB": "British Example"\n            },\n            description="Example option that does nothing",\n            description_localizations={\n                "en-GB": "British example option that does nothing"\n            }\n        )\n    ]\n)\nasync def ping(ctx, example):\n    responses = {"en-US": "Pong!",\n                "en-GB": "British Pong!"}\n    await ctx.respond(responses.get(ctx.interaction.locale, responses[\'en-US\']))\n\n@bot.slash_command(\n    name="ping2",\n    name_localizations={\n        "en-GB": "British_Ping"\n    },\n    description="Ping the bot",\n    description_localizations={\n        "en-GB": "British ping the bot"\n    }\n)\nasync def ping2(ctx, example: Option(str, "example", name_localizations={"en-GB": "British Example"}, description="Example option that does nothing", description_localizations={"en-GB": "British example option that does nothing"})):\n    responses = {"en-US": "Pong2!",\n                "en-GB": "British Pong2!"}\n    await ctx.respond(responses.get(ctx.interaction.locale, responses[\'en-US\']))\n\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://discord.com/developers/docs/reference#locales"},(0,i.kt)("inlineCode",{parentName:"a"},"Locales"))," - List of valid locales recognized by Discord")))}f.isMDXComponent=!0}}]);