"use strict";(self.webpackChunkguide_pycord_dev=self.webpackChunkguide_pycord_dev||[]).push([[1088],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?o.createElement(h,s(s({ref:t},p),{},{components:n})):o.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7319:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),s=["components"],i={title:"Subclassing Bots",description:"Subclassing is a popular way of creating Discord Bots. Explore how you can create a Discord bot by subclassing."},l=void 0,c={unversionedId:"popular-topics/subclassing-bots",id:"popular-topics/subclassing-bots",title:"Subclassing Bots",description:"Subclassing is a popular way of creating Discord Bots. Explore how you can create a Discord bot by subclassing.",source:"@site/docs/popular-topics/subclassing-bots.mdx",sourceDirName:"popular-topics",slug:"/popular-topics/subclassing-bots",permalink:"/popular-topics/subclassing-bots",draft:!1,editUrl:"https://github.com/Pycord-Development/guide/tree/main/docs/popular-topics/subclassing-bots.mdx",tags:[],version:"current",lastUpdatedBy:"Lala Sabathil",lastUpdatedAt:1713441056,formattedLastUpdatedAt:"Apr 18, 2024",frontMatter:{title:"Subclassing Bots",description:"Subclassing is a popular way of creating Discord Bots. Explore how you can create a Discord bot by subclassing."},sidebar:"defaultSidebar",previous:{title:"Sharding",permalink:"/popular-topics/sharding"},next:{title:"Threads",permalink:"/popular-topics/threads"}},p={},u=[{value:"About",id:"about",level:2},{value:"Why Subclassing?",id:"why-subclassing",level:2},{value:"Skeletal Frameworks for Bots",id:"skeletal-frameworks-for-bots",level:4},{value:"Running Multiple Instances",id:"running-multiple-instances",level:4},{value:"Basic Example",id:"basic-example",level:2}],d={toc:u},m="wrapper";function h(e){var t=e.components,n=(0,r.Z)(e,s);return(0,a.kt)(m,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"about"},"About"),(0,a.kt)("p",null,"Subclassing is another popular way of creating Discord Bots. Here, you create a bot by extending a bot class. To some advanced users, this is preferable to creating a bot instance with ",(0,a.kt)("inlineCode",{parentName:"p"},"bot = discord.Bot()"),"."),(0,a.kt)("p",null,"Subclassing is an intermediate python concept, so we recommend you learn about it before continuing. Some good resources are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.w3schools.com/python/python_classes.asp"},"W3Schools's Guide to Python Classes & Objects")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.w3schools.com/python/python_inheritance.asp"},"W3Schools's Guide to Python Inheritance"))),(0,a.kt)("h2",{id:"why-subclassing"},"Why Subclassing?"),(0,a.kt)("p",null,"Many developers prefer to subclass their bots for many reasons, some of them being:"),(0,a.kt)("h4",{id:"skeletal-frameworks-for-bots"},"Skeletal Frameworks for Bots"),(0,a.kt)("p",null,"Developers often share their bots code on open-source platforms, mostly GitHub, and allow users to self-host the bot (running their own instance of the bot with the code provided by the developer. Permissions vary in accordance to licences). Here, users find it easier and more convenient to have a small file that imports the custom bot class and runs it, rather than having to go through the code of the bot and find out which file to run. This makes it easier for people not familiar with programming to run and customize the bot, since it often brings down the code to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="./main.py"',title:'"./main.py"'},'from src import Bot\n\nbot = Bot()\n\nbot.run("TOKEN")\n')),(0,a.kt)("p",null,"Here, all the commands are inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"/src")," folder that the user need not bother with."),(0,a.kt)("h4",{id:"running-multiple-instances"},"Running Multiple Instances"),(0,a.kt)("p",null,"Some developers may need to run multiple instances of their bot (perhaps on different bot accounts). For example, a developer might have a second bot for testing alpha features. This system makes it simpler for the developer, and allows them to maintain multiple versions of the bot in the same directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="./alpha_bot.py"',title:'"./alpha_bot.py"'},'from src import Bot\n\nclass AlphaBot(Bot):  # subclasses Bot\n    ...  # insert any custom configuration\n\nbot = AlphaBot()\n\n@bot.slash_command()  # adds a new slash command to this subclassed bot\nasync def alpha_feature(ctx):\n    await ctx.respond("Alpha Feature!")\n\nbot.run("TOKEN")\n')),(0,a.kt)("p",null,"There are many more reasons to subclass! It's not required, and won't affect the speed of the bot, but it may affect your development process, for the good or for the worse. You don't miss out on any features when you subclass, either. Some developers want the OOP feel, while some just prefer that method and find it easier."),(0,a.kt)("h2",{id:"basic-example"},"Basic Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import discord\n\nclass MyBot(discord.Bot): # subclass discord.Bot\n    async def on_ready(self): # override the on_ready event\n        print('Logged in as')\n        print(self.user.name)\n        print(self.user.id)\n        print('------')\n\nbot = MyBot()\n\n@bot.slash_command() # create a slash command\nasync def ping(ctx):\n    await ctx.respond('Pong!')\n\nbot.run('token')\n")),(0,a.kt)("p",null,"As you can see, instead of creating a bot object with ",(0,a.kt)("inlineCode",{parentName:"p"},"bot = discord.Bot()"),", we subclass ",(0,a.kt)("a",{parentName:"p",href:"https://docs.pycord.dev/en/stable/api/clients.html#discord.Bot"},(0,a.kt)("inlineCode",{parentName:"a"},"discord.Bot")),". We then create an instance of our new bot class and run it. Notice how we don't need to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"@event")," decorator."),(0,a.kt)("p",null,"Here's another example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="./src/bot.py"',title:'"./src/bot.py"'},"import discord\n\nclass MyBot(discord.Bot): # subclass discord.Bot\n    async def on_ready(self): # override on_ready\n        print('Logged in as')\n        print(self.user.name)\n        print(self.user.id)\n        print('------')\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="./src/__init__.py"',title:'"./src/__init__.py"'},"from .bot import MyBot # import the MyBot class from the bot.py file\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="./main.py"',title:'"./main.py"'},"from src import MyBot # import MyBot from /src\n\nbot = MyBot() # create an instance of MyBot\n\n@bot.slash_command()\nasync def ping(ctx):\n    await ctx.respond('Pong!')\n\nbot.run(\"TOKEN\") # run the bot\n")),(0,a.kt)("p",null,"These are just two ways you could do it. There are ton of other structures you can implement. It's up to you."),(0,a.kt)("p",null,"So, should you subclass? There are no limitations you face if you decide to subclass your bot, but, once again, it's up to you."),(0,a.kt)("admonition",{title:"Related Topics",type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../Extensions/Commands/help-command"},"Making a Help Command")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"../Getting-Started/rules-and-common-practices"},"Rules and Common Practices")))))}h.isMDXComponent=!0}}]);