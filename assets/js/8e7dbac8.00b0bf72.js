"use strict";(self.webpackChunkguide_pycord_dev=self.webpackChunkguide_pycord_dev||[]).push([[6336],{5162:function(e,t,n){n.d(t,{Z:function(){return s}});var a=n(7294),o=n(4334),r={tabItem:"tabItem_Ymn6"};function s(e){var t=e.children,n=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,s),hidden:n},t)}},4866:function(e,t,n){n.d(t,{Z:function(){return x}});var a=n(7462),o=n(7294),r=n(4334),s=n(2466),i=n(6775),l=n(1980),d=n(7392),m=n(12);function c(e){return function(e){var t,n;return null!=(t=null==(n=o.Children.map(e,(function(e){if(!e||(0,o.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function u(e){var t=e.values,n=e.children;return(0,o.useMemo)((function(){var e=null!=t?t:c(n);return function(e){var t=(0,d.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function p(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function h(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,r=(0,i.k6)(),s=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,l._X)(s),(0,o.useCallback)((function(e){if(s){var t=new URLSearchParams(r.location.search);t.set(s,e),r.replace(Object.assign({},r.location,{search:t.toString()}))}}),[s,r])]}function f(e){var t,n,a,r,s=e.defaultValue,i=e.queryString,l=void 0!==i&&i,d=e.groupId,c=u(e),f=(0,o.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var o=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:s,tabValues:c})})),k=f[0],g=f[1],b=h({queryString:l,groupId:d}),y=b[0],v=b[1],x=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:d}.groupId),n=(0,m.Nk)(t),a=n[0],r=n[1],[a,(0,o.useCallback)((function(e){t&&r.set(e)}),[t,r])]),w=x[0],C=x[1],N=function(){var e=null!=y?y:w;return p({value:e,tabValues:c})?e:null}();return(0,o.useLayoutEffect)((function(){N&&g(N)}),[N]),{selectedValue:k,selectValue:(0,o.useCallback)((function(e){if(!p({value:e,tabValues:c}))throw new Error("Can't select invalid tab value="+e);g(e),v(e),C(e)}),[v,C,c]),tabValues:c}}var k=n(2389),g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){var t=e.className,n=e.block,i=e.selectedValue,l=e.selectValue,d=e.tabValues,m=[],c=(0,s.o5)().blockElementScrollPositionUntilNextRender,u=function(e){var t=e.currentTarget,n=m.indexOf(t),a=d[n].value;a!==i&&(c(t),l(a))},p=function(e){var t,n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":var a,o=m.indexOf(e.currentTarget)+1;n=null!=(a=m[o])?a:m[0];break;case"ArrowLeft":var r,s=m.indexOf(e.currentTarget)-1;n=null!=(r=m[s])?r:m[m.length-1]}null==(t=n)||t.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},d.map((function(e){var t=e.value,n=e.label,s=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:function(e){return m.push(e)},onKeyDown:p,onClick:u},s,{className:(0,r.Z)("tabs__item",g.tabItem,null==s?void 0:s.className,{"tabs__item--active":i===t})}),null!=n?n:t)})))}function y(e){var t=e.lazy,n=e.children,a=e.selectedValue,r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){var s=r.find((function(e){return e.props.value===a}));return s?(0,o.cloneElement)(s,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},r.map((function(e,t){return(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function v(e){var t=f(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",g.tabList)},o.createElement(b,(0,a.Z)({},e,t)),o.createElement(y,(0,a.Z)({},e,t)))}function x(e){var t=(0,k.Z)();return o.createElement(v,(0,a.Z)({key:String(t)},e))}},8624:function(e,t,n){n.d(t,{v:function(){return r}});var a=n(7294),o=n(7674),r=Object.assign({},o.TW,{profiles:{bob:{author:"BobDotCom",avatar:"/img/bob.png",roleColor:"#2cd6f7"},robocord:{author:"Robocord",avatar:"/img/robocord.png",roleColor:"#9b59b6",bot:!0},dorukyum:{author:"Dorukyum",avatar:"/img/dorukyum.png",roleColor:"#2cd6f7"}}});t.Z=function(e){var t=e.options,n=void 0===t?r:t,s=e.children;return a.createElement(o.qs.Provider,{value:n},a.createElement(o.dZ,null,s))}},3678:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return u},default:function(){return b},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return f}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),s=n(7674),i=n(8624),l=n(4866),d=n(5162),m=["components"],c={title:"Prefixed Commands",description:"Learn how to use the commands extension for Pycord."},u=void 0,p={unversionedId:"extensions/commands/prefixed-commands",id:"extensions/commands/prefixed-commands",title:"Prefixed Commands",description:"Learn how to use the commands extension for Pycord.",source:"@site/docs/extensions/commands/prefixed-commands.mdx",sourceDirName:"extensions/commands",slug:"/extensions/commands/prefixed-commands",permalink:"/extensions/commands/prefixed-commands",draft:!1,editUrl:"https://github.com/Pycord-Development/guide/tree/main/docs/extensions/commands/prefixed-commands.mdx",tags:[],version:"current",lastUpdatedBy:"Lala Sabathil",lastUpdatedAt:1713441056,formattedLastUpdatedAt:"Apr 18, 2024",frontMatter:{title:"Prefixed Commands",description:"Learn how to use the commands extension for Pycord."},sidebar:"defaultSidebar",previous:{title:"Help Command",permalink:"/extensions/commands/help-command"},next:{title:"Pages",permalink:"/category/pages"}},h={},f=[{value:"Syntax",id:"syntax",level:2},{value:"Parameters",id:"parameters",level:2}],k={toc:f},g="wrapper";function b(e){var t=e.components,n=(0,o.Z)(e,m);return(0,r.kt)(g,(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Before Discord added slash commands, all bots had prefixed commands. A user would type the bot's prefix\nfollowed by a word or phrase to invoke a command, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"?help")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"!help"),".\nHowever, this prefixed commands system isn't native to Discord! Developers made use of an ",(0,r.kt)("inlineCode",{parentName:"p"},"on_message"),'\nevent to check if the message began with a certain character, then invoke the command. Every time a\nmessage was sent, the bot would see the message and check for its "prefix"'),(0,r.kt)("p",null,"The syntax becomes a little more complicated when you want to have multiple commands. There are several\ndisadvantages to this system. This is where the commands extension comes in. ",(0,r.kt)("inlineCode",{parentName:"p"},"ext.commands")," has\nvarious advantages, such as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Simpler syntax"),(0,r.kt)("li",{parentName:"ul"},"Easier to use"),(0,r.kt)("li",{parentName:"ul"},"Easier to parse user input"),(0,r.kt)("li",{parentName:"ul"},"Comes with built-in help commands"),(0,r.kt)("li",{parentName:"ul"},"Comes with a built-in system for categorizing commands")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(d.Z,{value:"0",label:"Using Events to Create Prefixed Commands",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Prefixed Commands with Events"',title:'"Prefixed',Commands:!0,with:!0,'Events"':!0},'import discord\n\nclient = discord.Client()\n\n@client.event\nasync def on_message(message):\n    if message.content.startswith("!ping"):\n        await message.channel.send("Pong!")\n\n    elif message.content.startswith("!announce"):\n        if len(message.content.split(" ")) < 3:\n            await message.channel.send("You need to specify a title and a message. Correct usage: `!announce Hello Hello everyone!`")\n            return\n\n        msg = message.content.split(" ", 2)\n        title = msg[1]\n        content = msg[2]\n\n        await message.channel.send("**{}**\\n{}".format(title, content))\n\n    elif message.content.startswith("!"):\n        await message.channel.send("Unknown command.")\n')),(0,r.kt)(i.Z,{mdxType:"DiscordComponent"},(0,r.kt)(s.kK,{profile:"bob",mdxType:"DiscordMessage"},"!ping"),(0,r.kt)(s.kK,{profile:"robocord",mdxType:"DiscordMessage"},"Pong!"),(0,r.kt)(s.kK,{profile:"bob",mdxType:"DiscordMessage"},"!announce Hello Hello World!"),(0,r.kt)(s.kK,{profile:"robocord",t:!0,mdxType:"DiscordMessage"},(0,r.kt)("strong",null,"Hello"),(0,r.kt)("br",null),"Hello World!"),(0,r.kt)(s.kK,{profile:"bob",mdxType:"DiscordMessage"},"!help"),(0,r.kt)(s.kK,{profile:"robocord",mdxType:"DiscordMessage"},"Unknown Command."))),(0,r.kt)(d.Z,{value:"1",label:"Using the Commands Extension",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="The Commands Extension"',title:'"The',Commands:!0,'Extension"':!0},'import discord\nfrom discord.ext import commands\n\nintents = discord.Intents.default()\nintents.message_content = True\n\nbot = commands.Bot(command_prefix="!", intents=intents)\n\n@bot.command()\nasync def ping(ctx):\n    await ctx.send("Pong!")\n\n@bot.command()\nasync def announce(ctx, title, *, message):\n    await ctx.send("**{}**\\n{}".format(title, message))\n\n@bot.event\nasync def on_command_error(ctx, error):\n    if isinstance(error, commands.CommandNotFound):\n        await ctx.send("Unknown command.")\n')),(0,r.kt)(i.Z,{mdxType:"DiscordComponent"},(0,r.kt)(s.kK,{profile:"bob",mdxType:"DiscordMessage"},"!ping"),(0,r.kt)(s.kK,{profile:"robocord",mdxType:"DiscordMessage"},"Pong!"),(0,r.kt)(s.kK,{profile:"bob",mdxType:"DiscordMessage"},"!announce Hello Hello World!"),(0,r.kt)(s.kK,{profile:"robocord",mdxType:"DiscordMessage"},(0,r.kt)("strong",null,"Hello"),(0,r.kt)("br",null),"Hello World!"),(0,r.kt)(s.kK,{profile:"bob",mdxType:"DiscordMessage"},"!pycord"),(0,r.kt)(s.kK,{profile:"robocord",mdxType:"DiscordMessage"},"Unknown command."),(0,r.kt)(s.kK,{profile:"bob",mdxType:"DiscordMessage"},"!help"),(0,r.kt)(s.kK,{profile:"robocord",mdxType:"DiscordMessage"},(0,r.kt)("code",null,"No Category:",(0,r.kt)("br",null),(0,r.kt)("div",{style:{paddingLeft:"2em"}},"!help Shows this message",(0,r.kt)("br",null),"!ping",(0,r.kt)("br",null),"!announce"),(0,r.kt)("br",null),"Type !help command for more info on a command.",(0,r.kt)("br",null),"You can also type !help category for more info on a category."))),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The commands extension has many more uses. This example only showcases the basic features mentioned\nin the previous example. Other things you can do with the commands extension include using a different\nbuilt-in help command and creating your own. The following tutorials showcase these.")))),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,"Before we check out the syntax, let's take a look at the bot classes."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"discord.Client")," - Contains only events."),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"discord.Bot")," - Subclasses ",(0,r.kt)("inlineCode",{parentName:"p"},"discord.Client"),", adds commands."),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"discord.ext.commands.Bot")," - Subclasses ",(0,r.kt)("inlineCode",{parentName:"p"},"discord.Bot"),", adds prefixed commands, cogs, and more.")),(0,r.kt)("p",null,"This means that ",(0,r.kt)("inlineCode",{parentName:"p"},"discord.ext.commands.Bot")," has both slash commands and prefixed commands, as well as\nevents, cogs and more."),(0,r.kt)("p",null,"Now let's look at the syntax."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="A Simple Prefixed Bot"',title:'"A',Simple:!0,Prefixed:!0,'Bot"':!0},'import discord\nfrom discord.ext import commands # Import the commands extension\n# discord.ext.commands are not the same as discord.commands!\n\nintents = discord.Intents.default() #Defining intents\nintents.message_content = True # Adding the message_content intent so that the bot can read user messages\n\nbot = commands.Bot(command_prefix="!", intents=intents) # You can change the command prefix to whatever you want.\n\n@bot.command() # This is the decorator we use to create a prefixed command.\nasync def ping(ctx): # This is the function we will use to create the command.\n    await ctx.send("Pong!") # This is the response the bot will send.\n\n\nbot.run("token") # Run the bot with your token.\n')),(0,r.kt)(i.Z,{mdxType:"DiscordComponent"},(0,r.kt)(s.kK,{profile:"bob",mdxType:"DiscordMessage"},"!ping"),(0,r.kt)(s.kK,{profile:"robocord",mdxType:"DiscordMessage"},"Pong!"),(0,r.kt)(s.kK,{profile:"bob",mdxType:"DiscordMessage"},"!help"),(0,r.kt)(s.kK,{profile:"robocord",mdxType:"DiscordMessage"},(0,r.kt)("code",null,"No Category:",(0,r.kt)("br",null),(0,r.kt)("div",{style:{paddingLeft:"2em"}},"!help Shows this message",(0,r.kt)("br",null),"!ping"),(0,r.kt)("br",null),"Type !help command for more info on a command.",(0,r.kt)("br",null),"You can also type !help category for more info on a category."))),(0,r.kt)("br",null),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The help command is a built-in command and is enabled by default. You will learn more about it in the\nfollowing guides.")),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"Prefixed commands can take parameters, just like slash commands. You can specify the parameters in\nthe function itself."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Parameters Example 1"',title:'"Parameters',Example:!0,'1"':!0},"@bot.command()\nasync def echo(ctx, *, message):\n    await ctx.send(message)\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ctx")," is the context of the message. ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," means that the parameter can be any number of words. ",(0,r.kt)("inlineCode",{parentName:"p"},"message"),"\nis the parameter. If you had not passed ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"message")," would only have been one word."),(0,r.kt)("p",null,"For example, if a user had used ",(0,r.kt)("inlineCode",{parentName:"p"},"!echo hello world"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"message")," would have been ",(0,r.kt)("inlineCode",{parentName:"p"},"hello"),". Since we\npassed ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"message")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"hello world"),", or the rest of the message."),(0,r.kt)("p",null,"We can pass multiple parameters too!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Parameters Example 2"',title:'"Parameters',Example:!0,'2"':!0},'@bot.command()\nasync def echo(ctx, channel:discord.TextChannel, title, *, message):\n    await channel.send("**{}**\\n{}".format(title, message))\n')),(0,r.kt)("p",null,"In the example above, ",(0,r.kt)("inlineCode",{parentName:"p"},"channel")," is a parameter that is of type ",(0,r.kt)("inlineCode",{parentName:"p"},"discord.TextChannel"),". When you\nspecify the type of the parameter, Pycord will automatically try to convert the parameter to that type.\nThat is why you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"channel.send")," directly without needing to convert it first."),(0,r.kt)("p",null,"We also have a new parameter, ",(0,r.kt)("inlineCode",{parentName:"p"},"title"),". This does not have a type, so it will be a string. ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," means\nthat the rest of the message belongs to the next parameter, in this case, ",(0,r.kt)("inlineCode",{parentName:"p"},"message"),"."),(0,r.kt)("p",null,"When a user types ",(0,r.kt)("inlineCode",{parentName:"p"},"!echo #general Greetings! Hello World!"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"channel")," will be the text channel\n",(0,r.kt)("inlineCode",{parentName:"p"},"#general"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"Greetings!")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"message")," will be ",(0,r.kt)("inlineCode",{parentName:"p"},"Hello World!"),"."),(0,r.kt)("p",null,"Let's take an example where the user passes ",(0,r.kt)("inlineCode",{parentName:"p"},"!echo #general Holiday Greetings! Greetings to you all!"),'.\nHere, the user wants the title to be "Holiday Greetings!" and the message to be "Greetings to you all!".\nHowever, since Pycord parses the message at whitespaces, the title will end up being "Holiday" and the\nmessage "Greetings! Greetings to you all!". The user can prevent this by typing ',(0,r.kt)("inlineCode",{parentName:"p"},'!echo "Holiday\nGreetings!" Greetings to you all!'),"."),(0,r.kt)(i.Z,{mdxType:"DiscordComponent"},(0,r.kt)(s.kK,{author:"Santa Claus",avatar:"blue",mdxType:"DiscordMessage"},"!echo #general Holiday Greetings! Greetings to you all!"),(0,r.kt)(s.kK,{author:"Elf",avatar:"red",bot:!0,mdxType:"DiscordMessage"},(0,r.kt)("strong",null,"Holiday"),(0,r.kt)("br",null),"Greetings! Greetings to you all!"),(0,r.kt)(s.kK,{author:"Mrs. Claus",avatar:"green",mdxType:"DiscordMessage"},'!echo #general "Holiday Greetings!" Greetings to you all!'),(0,r.kt)(s.kK,{author:"Elf",avatar:"red",bot:!0,mdxType:"DiscordMessage"},(0,r.kt)("strong",null,"Holiday Greetings!"),(0,r.kt)("br",null),"Greetings to you all!")),(0,r.kt)("p",null,"Let's check out another example for parameters and parameter types."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Parameters Example 3"',title:'"Parameters',Example:!0,'3"':!0},'import random\n\n@bot.command()\nasync def gtn(ctx, guess:int):\n    number = random.randint(1, 10)\n    if guess == number:\n        await ctx.send("You guessed it!")\n    else:\n        await ctx.send("Nope! Better luck next time :)")\n')),(0,r.kt)("p",null,"If you had not specified the type of the parameter, it would have been a string. And since ",(0,r.kt)("inlineCode",{parentName:"p"},'"5"')," is not\nthe same as ",(0,r.kt)("inlineCode",{parentName:"p"},"5"),' in python, the bot would have responded with "Nope! Better luck next time :)".\nEven if you do not specify the type of the parameter, you can still convert it later on, in this case,\nwith ',(0,r.kt)("inlineCode",{parentName:"p"},"int(guess)"),"."),(0,r.kt)("admonition",{title:"Related Topics",type:"info"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"groups"},"Command Groups")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../../Getting-Started/rules-and-common-practices"},"Rules and Common Practices")))))}b.isMDXComponent=!0}}]);