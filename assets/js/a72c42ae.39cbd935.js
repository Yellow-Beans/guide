"use strict";(self.webpackChunkguide_pycord_dev=self.webpackChunkguide_pycord_dev||[]).push([[4757],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var r=a.createContext({}),c=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(r.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,r=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=s,h=d["".concat(r,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l[d]="string"==typeof e?e:s,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(7294),s=n(4334),i={tabItem:"tabItem_Ymn6"};function o(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(i.tabItem,o),hidden:n},t)}},4866:function(e,t,n){n.d(t,{Z:function(){return g}});var a=n(7462),s=n(7294),i=n(4334),o=n(2466),l=n(6775),r=n(1980),c=n(7392),u=n(12);function d(e){return function(e){var t,n;return null!=(t=null==(n=s.Children.map(e,(function(e){if(!e||(0,s.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function p(e){var t=e.values,n=e.children;return(0,s.useMemo)((function(){var e=null!=t?t:d(n);return function(e){var t=(0,c.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function m(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function h(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId,i=(0,l.k6)(),o=function(e){var t=e.queryString,n=void 0!==t&&t,a=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,r._X)(o),(0,s.useCallback)((function(e){if(o){var t=new URLSearchParams(i.location.search);t.set(o,e),i.replace(Object.assign({},i.location,{search:t.toString()}))}}),[o,i])]}function f(e){var t,n,a,i,o=e.defaultValue,l=e.queryString,r=void 0!==l&&l,c=e.groupId,d=p(e),f=(0,s.useState)((function(){return function(e){var t,n=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var s=null!=(t=a.find((function(e){return e.default})))?t:a[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:o,tabValues:d})})),y=f[0],w=f[1],b=h({queryString:r,groupId:c}),k=b[0],v=b[1],g=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:c}.groupId),n=(0,u.Nk)(t),a=n[0],i=n[1],[a,(0,s.useCallback)((function(e){t&&i.set(e)}),[t,i])]),N=g[0],_=g[1],C=function(){var e=null!=k?k:N;return m({value:e,tabValues:d})?e:null}();return(0,s.useLayoutEffect)((function(){C&&w(C)}),[C]),{selectedValue:y,selectValue:(0,s.useCallback)((function(e){if(!m({value:e,tabValues:d}))throw new Error("Can't select invalid tab value="+e);w(e),v(e),_(e)}),[v,_,d]),tabValues:d}}var y=n(2389),w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){var t=e.className,n=e.block,l=e.selectedValue,r=e.selectValue,c=e.tabValues,u=[],d=(0,o.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==l&&(d(t),r(a))},m=function(e){var t,n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var a,s=u.indexOf(e.currentTarget)+1;n=null!=(a=u[s])?a:u[0];break;case"ArrowLeft":var i,o=u.indexOf(e.currentTarget)-1;n=null!=(i=u[o])?i:u[u.length-1]}null==(t=n)||t.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},c.map((function(e){var t=e.value,n=e.label,o=e.attributes;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:function(e){return u.push(e)},onKeyDown:m,onClick:p},o,{className:(0,i.Z)("tabs__item",w.tabItem,null==o?void 0:o.className,{"tabs__item--active":l===t})}),null!=n?n:t)})))}function k(e){var t=e.lazy,n=e.children,a=e.selectedValue,i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){var o=i.find((function(e){return e.props.value===a}));return o?(0,s.cloneElement)(o,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},i.map((function(e,t){return(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==a})})))}function v(e){var t=f(e);return s.createElement("div",{className:(0,i.Z)("tabs-container",w.tabList)},s.createElement(b,(0,a.Z)({},e,t)),s.createElement(k,(0,a.Z)({},e,t)))}function g(e){var t=(0,y.Z)();return s.createElement(v,(0,a.Z)({key:String(t)},e))}},930:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return y},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return m}});var a=n(7462),s=n(3366),i=(n(7294),n(3905)),o=n(4866),l=n(5162),r=["components"],c={title:"Select Menus",description:"Learn all about implementing Select Menus or Dropdowns in your Discord Bot with Pycord."},u=void 0,d={unversionedId:"interactions/ui-components/dropdowns",id:"interactions/ui-components/dropdowns",title:"Select Menus",description:"Learn all about implementing Select Menus or Dropdowns in your Discord Bot with Pycord.",source:"@site/docs/interactions/ui-components/dropdowns.mdx",sourceDirName:"interactions/ui-components",slug:"/interactions/ui-components/dropdowns",permalink:"/interactions/ui-components/dropdowns",draft:!1,editUrl:"https://github.com/Pycord-Development/guide/tree/main/docs/interactions/ui-components/dropdowns.mdx",tags:[],version:"current",lastUpdatedBy:"Lala Sabathil",lastUpdatedAt:1713441056,formattedLastUpdatedAt:"Apr 18, 2024",frontMatter:{title:"Select Menus",description:"Learn all about implementing Select Menus or Dropdowns in your Discord Bot with Pycord."},sidebar:"defaultSidebar",previous:{title:"Buttons",permalink:"/interactions/ui-components/buttons"},next:{title:"Modal Dialogs",permalink:"/interactions/ui-components/modal-dialogs"}},p={},m=[{value:"Concept",id:"concept",level:2},{value:"Usage Syntax",id:"usage-syntax",level:2},{value:"Customization",id:"customization",level:2},{value:"Select Menu Properties",id:"select-menu-properties",level:4},{value:"Select Option Properties",id:"select-option-properties",level:4},{value:"Select Types",id:"select-types",level:2},{value:"Specifying Channel Types",id:"specifying-channel-types",level:3},{value:"Action Rows",id:"action-rows",level:2},{value:"Disabling Select Menus",id:"disabling-select-menus",level:2},{value:"Pre-Disabled Menus",id:"pre-disabled-menus",level:3},{value:"Disabling Menus on Press",id:"disabling-menus-on-press",level:3},{value:"Timeouts",id:"timeouts",level:2},{value:"Persistent Views",id:"persistent-views",level:2},{value:"FAQ",id:"faq",level:2},{value:"How many select menus can I have in a message?",id:"how-many-select-menus-can-i-have-in-a-message",level:4},{value:"Can I add more than one view to a message?",id:"can-i-add-more-than-one-view-to-a-message",level:4},{value:"Why are UI Components so confusing?",id:"why-are-ui-components-so-confusing",level:4},{value:'<e id="oop">What is OOP? What is subclassing?</e>',id:"what-is-oop-what-is-subclassing",level:4},{value:"Do select menus need any special permissions?",id:"do-select-menus-need-any-special-permissions",level:4}],h={toc:m},f="wrapper";function y(e){var t=e.components,n=(0,s.Z)(e,r);return(0,i.kt)(f,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Shortly after the buttons were added, Discord added their second message component: Select Menus. Select Menus allow users to choose from a list of items sent by a bot. These are a great substitute for having a user send a number that corresponds to an option. You can even allow users to select multiple options from the Select Menus. This guide will show you the easy and painless ways of using them with Pycord."),(0,i.kt)("h2",{id:"concept"},"Concept"),(0,i.kt)("p",null,"Select Menus aren't the only message component in Discord. There's also ",(0,i.kt)("a",{parentName:"p",href:"./buttons"},"Buttons")," and ",(0,i.kt)("a",{parentName:"p",href:"./modal-dialogs"},"Modal Dialogs"),". Select Menus make it easy for users to pick one or multiple options from a list provided by a bot."),(0,i.kt)("p",null,'These UI elements reside in a "view". To learn more about views, please refer to the\n',(0,i.kt)("a",{parentName:"p",href:"../../interactions"},"interactions page"),"."),(0,i.kt)("h2",{id:"usage-syntax"},"Usage Syntax"),(0,i.kt)("p",null,"Let's see how to create a simple responsive select menu."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import discord\n\nbot = discord.Bot()\n\nclass MyView(discord.ui.View):\n    @discord.ui.select( # the decorator that lets you specify the properties of the select menu\n        placeholder = "Choose a Flavor!", # the placeholder text that will be displayed if nothing is selected\n        min_values = 1, # the minimum number of values that must be selected by the users\n        max_values = 1, # the maximum number of values that can be selected by the users\n        options = [ # the list of options from which users can choose, a required field\n            discord.SelectOption(\n                label="Vanilla",\n                description="Pick this if you like vanilla!"\n            ),\n            discord.SelectOption(\n                label="Chocolate",\n                description="Pick this if you like chocolate!"\n            ),\n            discord.SelectOption(\n                label="Strawberry",\n                description="Pick this if you like strawberry!"\n            )\n        ]\n    )\n    async def select_callback(self, select, interaction): # the function called when the user is done selecting options\n        await interaction.response.send_message(f"Awesome! I like {select.values[0]} too!")\n\n@bot.command()\nasync def flavor(ctx):\n    await ctx.respond("Choose a flavor!", view=MyView())\n\nbot.run("TOKEN")\n')),(0,i.kt)("p",null,"There's a lot going on over here! Don't worry, we will go over the code and explain it."),(0,i.kt)("p",null,"As you can see, we create a class called ",(0,i.kt)("inlineCode",{parentName:"p"},"MyView")," that subclasses\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.pycord.dev/en/stable/api/ui_kit.html#discord.ui.View"},(0,i.kt)("inlineCode",{parentName:"a"},"discord.ui.View")),"."),(0,i.kt)("p",null,"Then, we add a function called ",(0,i.kt)("inlineCode",{parentName:"p"},"select_callback")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," class with the decorator\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.pycord.dev/en/stable/api/ui_kit.html#discord.ui.select"},(0,i.kt)("inlineCode",{parentName:"a"},"discord.ui.select")),".\nThis decorator adds a select menu to the view. This decorator takes a few arguments to customize your select menu. Read them in the ",(0,i.kt)("a",{parentName:"p",href:"#customization"},"Customization section"),"."),(0,i.kt)("p",null,"That was the decorator. Now, the function itself is pretty simple. It takes two parameters, not including ",(0,i.kt)("inlineCode",{parentName:"p"},"self"),". The parameters are ",(0,i.kt)("inlineCode",{parentName:"p"},"select"),": The select menu, and ",(0,i.kt)("inlineCode",{parentName:"p"},"interaction"),": a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.pycord.dev/en/stable/api/models.html#discord.InteractionResponse"},(0,i.kt)("inlineCode",{parentName:"a"},"discord.InteractionResponse"))," object. Both of these are passed by Pycord, so you just need to specify them in the function!"),(0,i.kt)("p",null,"In the callback, you could do anything you want. You get the two parameters ",(0,i.kt)("inlineCode",{parentName:"p"},"select")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"interaction")," to play around with. Here, we send a message using ",(0,i.kt)("inlineCode",{parentName:"p"},"await interaction.response.send_message")," (where interaction is ",(0,i.kt)("a",{parentName:"p",href:"https://docs.pycord.dev/en/stable/api/models.html#discord.InteractionResponse"},(0,i.kt)("inlineCode",{parentName:"a"},"discord.InteractionResponse")),") with content ",(0,i.kt)("inlineCode",{parentName:"p"},"select.values[0]"),", which sends the label of the first/only option the user selected. Obviously, this is only an example, and you could do just about anything you want."),(0,i.kt)("p",null,"Finally, we create a global slash command called ",(0,i.kt)("inlineCode",{parentName:"p"},"flavour"),' that sends a message "Choose a flavor!" along with the view\nthat contains our select menu.'),(0,i.kt)("p",null,"This is the basic syntax of creating a select menu. What you create with it is up to you. You can worry\nabout making your code do amazing things, while Pycord handles the rest!"),(0,i.kt)("h2",{id:"customization"},"Customization"),(0,i.kt)("h4",{id:"select-menu-properties"},"Select Menu Properties"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"select_type"),": The type of select to create. This must be a ",(0,i.kt)("a",{parentName:"li",href:"https://docs.pycord.dev/en/stable/api/enums.html#discord.ComponentType"},(0,i.kt)("inlineCode",{parentName:"a"},"discord.ComponentType"))," value."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"channel_types"),": A list of channel types that can be selected in the menu. This is only valid for selects of ",(0,i.kt)("inlineCode",{parentName:"li"},"select_type")," ",(0,i.kt)("a",{parentName:"li",href:"https://docs.pycord.dev/en/stable/api/enums.html#discord.ComponentType"},(0,i.kt)("inlineCode",{parentName:"a"},"discord.ComponentType.channel_select")),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options"),": A list of ",(0,i.kt)("a",{parentName:"li",href:"https://docs.pycord.dev/en/stable/api/data_classes.html#discord.SelectOption"},(0,i.kt)("inlineCode",{parentName:"a"},"discord.SelectOption"))," values. These are the options that can be selected in this menu."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"placeholder")," is the placeholder text shown in the select menu if no option is selected."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"custom_id"),": The ID of the select menu that gets received during an interaction. It is recommended not to set this to anything unless you are trying to create a persistent view."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"row"),": The relative row this select menu belongs to. A Discord component can only have 5 rows. By default, items are arranged automatically into those 5 rows. If you\u2019d like to control the relative positioning of the row then passing an index is advised. For example, row=1 will show up before row=2. Defaults to None, which is automatic ordering. The row number must be between 0 and 4 (i.e. zero indexed)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"min_values"),": The minimum number of items that must be chosen for this select menu. Defaults to 1 and must be between 1 and 25."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_values"),": The maximum number of items that must be chosen for this select menu. Defaults to 1 and must be between 1 and 25."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"disabled"),": Whether the select is disabled or not. Defaults to False.")),(0,i.kt)("h4",{id:"select-option-properties"},"Select Option Properties"),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," parameter, you pass a list of ",(0,i.kt)("a",{parentName:"p",href:"https://docs.pycord.dev/en/stable/api/data_classes.html#discord.SelectOption"},(0,i.kt)("inlineCode",{parentName:"a"},"discord.SelectOption"))," values. This class also has a few parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default")," (whether the option is selected by default)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"description")," (an additional description, if any)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"emoji")," (a string or an emoji object, if any)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"label")," (the name displayed to users, can be up to 100 characters)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value")," (a special value of the option, defaults to the label).")),(0,i.kt)("h2",{id:"select-types"},"Select Types"),(0,i.kt)("p",null,"In addition to regular string selects, you can also have your select menu contain users, roles, mentionables, and channels as its options. You can use these alternative select types by passing a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.pycord.dev/en/stable/api/enums.html#discord.ComponentType"},(0,i.kt)("inlineCode",{parentName:"a"},"discord.ComponentType"))," value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"select_type")," parameter when creating the Select."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class MyView(discord.ui.View):\n    @discord.ui.select(\n        select_type=discord.ComponentType.user_select\n    )\n    async def select_callback(self, select, interaction):\n        await interaction.response.send_message(f"Hello, {select.values[0].mention}")\n')),(0,i.kt)("p",null,"Additionally, you can use shortcut decorators to create a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.pycord.dev/en/master/api/ui_kit.html#discord.ui.select"},(0,i.kt)("inlineCode",{parentName:"a"},"discord.ui.Select"))," with a predetermined ",(0,i.kt)("a",{parentName:"p",href:"https://docs.pycord.dev/en/stable/api/enums.html#discord.ComponentType"},(0,i.kt)("inlineCode",{parentName:"a"},"discord.ComponentType"))," value. Using a shortcut decorator, the above code can be rewritten like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class MyView(discord.ui.View):\n    @discord.ui.user_select()\n    async def select_callback(self, select, interaction):\n        await interaction.response.send_message(f"Hello, {select.values[0].mention}")\n')),(0,i.kt)("h3",{id:"specifying-channel-types"},"Specifying Channel Types"),(0,i.kt)("p",null,"When using a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.pycord.dev/en/stable/api/enums.html#discord.ComponentType.channel_select"},(0,i.kt)("inlineCode",{parentName:"a"},"discord.ComponentType.channel_select"))," type select menu, you can pass in a list of ",(0,i.kt)("a",{parentName:"p",href:"https://docs.pycord.dev/en/stable/api/enums.html#discord.ChannelType"},(0,i.kt)("inlineCode",{parentName:"a"},"discord.ChannelType"))," values to limit which types of channels users can choose when interacting with the select menu."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class MyView(discord.ui.View):\n    @discord.ui.select(\n        select_type=discord.ComponentType.channel_select,\n        channel_types=[discord.ChannelType.text, discord.ChannelType.voice]\n    )\n    async def select_callback(self, select, interaction):\n        await interaction.response.send_message(f"You selected {select.values[0].mention}")\n')),(0,i.kt)("h2",{id:"action-rows"},"Action Rows"),(0,i.kt)("p",null,"We have discussed that Views can have 5 rows. Each row has 5 slots. A button takes a single slot, while a select menu takes up all 5 of them. This means a view can have a maximum of 5 select menus, or any possible combination of select menus and buttons."),(0,i.kt)("p",null,"The arrangement of buttons and select menus is generally adjusted by Pycord. However, it is possible to move them to specific relative rows. This is done by specifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"row")," argument."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"mdxAdmonitionTitle"},"row")," argument"),(0,i.kt)("p",{parentName:"admonition"},"The row argument specifies the relative row this select menu belongs to. A Discord component can only have 5 rows. By default, items are arranged automatically into those 5 rows. If you\u2019d like to control the relative positioning of the row then passing an index is advised. For example, row=1 will show up before row=2. Defaults to None, which is automatic ordering. The row number must be between 0 and 4 (i.e. zero-indexed).")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class MyView(discord.ui.View):\n    @discord.ui.button(label="Button 1", row=0, style=discord.ButtonStyle.primary)\n    async def first_button_callback(self, button, interaction):\n        await interaction.response.send_message("You pressed me!")\n\n    @discord.ui.button(label="Button 2", row=0, style=discord.ButtonStyle.primary)\n    async def second_button_callback(self, button, interaction):\n        await interaction.response.send_message("You pressed me!")\n\n    @discord.ui.select(\n        row = 1,\n        options = [...]\n    )\n    async def select_callback(self, select, interaction):\n        await interaction.response.send_message(f"Awesome! I like {select.values[0]} too!")\n')),(0,i.kt)("h2",{id:"disabling-select-menus"},"Disabling Select Menus"),(0,i.kt)("h3",{id:"pre-disabled-menus"},"Pre-Disabled Menus"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class MyView(discord.ui.View):\n    @discord.ui.select(\n        disabled = True, # pass disabled=True to set the menu as disabled\n        options = [...]\n    )\n    async def select_callback(self, select, interaction):\n        ...\n\n@bot.command()\nasync def select_menu(ctx):\n    await ctx.send("Select and option from the menu!", view=MyView())\n')),(0,i.kt)("h3",{id:"disabling-menus-on-press"},"Disabling Menus on Press"),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"disabling-a-single-component",label:"Disabling a single component",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class MyView(discord.ui.View):\n  @discord.ui.select(options = [...])\n  async def select_callback(self, select, interaction):\n      select.disabled = True # set the status of the select as disabled\n      await interaction.response.edit_message(view=self) # edit the message to show the changes\n"))),(0,i.kt)(l.Z,{value:"disabling-all-children",label:"Disabling all the components of a view",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class MyView(discord.ui.View):\n    @discord.ui.select(options = [...])\n    async def first_select_callback(self, select, interaction):\n        self.disable_all_items()\n        await interaction.response.edit_message(view=self) # edit the message to show the changes\n\n    @discord.ui.select(options = [...])\n    async def second_select_callback(self, select, interaction):\n        self.disable_all_items()\n        await interaction.response.edit_message(view=self)\n")))),(0,i.kt)("h2",{id:"timeouts"},"Timeouts"),(0,i.kt)("p",null,"You may want a select menu to automatically stop working after a certain amount of time. This is where timeouts come in."),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"0",label:"Specifying time when creating a view object",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class MyView(discord.ui.View):\n    async def on_timeout(self):\n        self.disable_all_items()\n        await self.message.edit(content="You took too long! Disabled all the components.", view=self)\n\n    @discord.ui.select(options = [...])\n    async def select_callback(self, select, interaction):\n        ...\n\n@bot.command()\nasync def select(ctx):\n    await ctx.send(view=MyView(timeout=30)) # specify the timeout here\n'))),(0,i.kt)(l.Z,{value:"1",label:"Specifying the time when subclassing",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class MyView(discord.ui.View):\n    def __init__(self):\n        super().__init__(timeout=10) # specify the timeout here\n\n    async def on_timeout(self):\n        self.disable_all_items()\n        await self.message.edit(content="You took too long! Disabled all the components.", view=self)\n\n    @discord.ui.select(options = [...])\n    async def select_callback(self, select, interaction):\n        ...\n')))),(0,i.kt)("p",null,"Here, we disable all buttons and select menus in the view. Then, we edit the message to show that the timeout was reached. "),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"on_timeout")," coroutine is not present, the components will simply stop working after the specified time.")),(0,i.kt)("h2",{id:"persistent-views"},"Persistent Views"),(0,i.kt)("p",null,"Sometimes, instead of a select menu that is disabled after a certain amount of time, you want to have a\nselect menu that is always working."),(0,i.kt)("p",null,"Normally, when the bot goes offline, all of its views stop working, even if they don't have a timeout. You will be able to see the\nviews, but nothing will happen when you try to interact with them. This is a problem\nif you are trying to create a self-role system, for example. This is where persistent views come in."),(0,i.kt)("p",null,"Persistent views work forever. When the bot goes offline, the buttons and select menus will stop working. However, when the bot comes back online, the buttons and select menus will start working again."),(0,i.kt)("p",null,"In a Persistent View, the timeout must be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," and all the children in the view much have a ",(0,i.kt)("inlineCode",{parentName:"p"},"custom_id")," attribute set."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'@bot.event\nasync def on_ready():\n    bot.add_view(MyView()) # Registers a View for persistent listening\n\nclass MyView(discord.ui.View):\n    def __init__(self):\n        super().__init__(timeout=None) # timeout of the view must be set to None\n\n    @discord.ui.select(custom_id="select-1", options = [...]) # a custom_id must be set\n    async def select_callback(self, select, interaction):\n        ...\n\n@bot.command()\nasync def select_menu(ctx):\n    await ctx.send(f"View persistence status: {MyView.is_persistent(MyView())}", view=MyView())\n')),(0,i.kt)("h2",{id:"faq"},"FAQ"),(0,i.kt)("h4",{id:"how-many-select-menus-can-i-have-in-a-message"},"How many select menus can I have in a message?"),(0,i.kt)("p",null,"Each message can have a maximum of 5 select menus. Views can have up to 5 rows, and each row has 5 slots. A button takes up one slot, while a select menu takes up all five slots."),(0,i.kt)("h4",{id:"can-i-add-more-than-one-view-to-a-message"},"Can I add more than one view to a message?"),(0,i.kt)("p",null,"No. As a Discord limitation, you can only have one view per message."),(0,i.kt)("h4",{id:"why-are-ui-components-so-confusing"},"Why are UI Components so confusing?"),(0,i.kt)("p",null,"They cannot be simple like commands. This system makes them flexible and doesn't limit your imagination. There are loads of different ways you can use UI Components. For example, you could subclass Buttons or Select Menus and add them to a view using the view's ",(0,i.kt)("inlineCode",{parentName:"p"},"add_item")," function."),(0,i.kt)("p",null,"UI Components aren't hard to use if you know Python. We recommend learning ",(0,i.kt)("a",{parentName:"p",href:"#oop"},"Object-Oriented Programming with Python"),"."),(0,i.kt)("h4",{id:"what-is-oop-what-is-subclassing"},(0,i.kt)("e",{id:"oop"},"What is OOP? What is subclassing?")),(0,i.kt)("p",null,"OOP (object-oriented programming) is a programming paradigm that allows you to create objects that have\ntheir own properties and methods. Almost everything in python is an object or a class. ",(0,i.kt)("inlineCode",{parentName:"p"},"discord.Embed")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"discord.ui.View")," are both classes. When you use ",(0,i.kt)("inlineCode",{parentName:"p"},"view = discord.ui.View()")," to create a view, you are actually creating an object of type ",(0,i.kt)("inlineCode",{parentName:"p"},"discord.ui.View"),"."),(0,i.kt)("p",null,"Subclassing is a Python OOP concept. It means that you can create a class that inherits from another class. In other words, the class that subclasses another class can inherit all the methods and attributes of that class."),(0,i.kt)("p",null,"We highly recommend you learn about basic Python concepts like classes and inheritance before you start learning Pycord."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Resources"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.w3schools.com/python/python_classes.asp"},"W3Schools's Guide to Python Classes & Objects")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.w3schools.com/python/python_inheritance.asp"},"W3Schools's Guide to Python Inheritance"))),(0,i.kt)("h4",{id:"do-select-menus-need-any-special-permissions"},"Do select menus need any special permissions?"),(0,i.kt)("p",null,"No new permissions are needed in the bot or in the server."),(0,i.kt)("admonition",{title:"Related Topics",type:"info"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../application-commands/slash-commands"},"Slash Commands")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"../../interactions"},"Interactions Index")))))}y.isMDXComponent=!0}}]);