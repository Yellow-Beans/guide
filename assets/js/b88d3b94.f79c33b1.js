"use strict";(self.webpackChunkguide_pycord_dev=self.webpackChunkguide_pycord_dev||[]).push([[59],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return v}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=o,v=c["".concat(u,".").concat(d)]||c[d]||m[d]||a;return n?r.createElement(v,i(i({ref:t},p),{},{components:n})):r.createElement(v,i({ref:t},p))}));function v(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6740:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return v},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={title:"Virtual Environments",description:"Learn how to set up a virtual environment for Pycord."},u=void 0,s={unversionedId:"more/virtual-environments",id:"more/virtual-environments",title:"Virtual Environments",description:"Learn how to set up a virtual environment for Pycord.",source:"@site/docs/more/virtual-environments.mdx",sourceDirName:"more",slug:"/more/virtual-environments",permalink:"/more/virtual-environments",draft:!1,editUrl:"https://github.com/Pycord-Development/guide/tree/main/docs/more/virtual-environments.mdx",tags:[],version:"current",lastUpdatedBy:"Lala Sabathil",lastUpdatedAt:1713441056,formattedLastUpdatedAt:"Apr 18, 2024",frontMatter:{title:"Virtual Environments",description:"Learn how to set up a virtual environment for Pycord."},sidebar:"defaultSidebar",previous:{title:"Installing Git",permalink:"/more/git"}},p={},c=[{value:"Setup",id:"setup",level:2},{value:"Additional info",id:"additional-info",level:2}],m={toc:c},d="wrapper";function v(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"Sometimes you want to keep libraries from polluting system installs or use a different version of libraries than the ones installed on the system. You might also not have permissions to install libraries system-wide. For this purpose, the standard library as of Python 3.3 comes with a concept called \u201cVirtual Environment\u201ds to help maintain these separate versions."),(0,a.kt)("p",null,"A more in-depth tutorial is found on ",(0,a.kt)("a",{parentName:"p",href:"https://docs.python.org/3/tutorial/venv.html"},"Virtual Environments and Packages"),"."),(0,a.kt)("p",null,"However, for the quick and dirty:"),(0,a.kt)("p",null,"Go to your project\u2019s working directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd your-bot-source\n$ python3 -m venv venv\n")),(0,a.kt)("p",null,"Activate the virtual environment:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ source venv/bin/activate\n")),(0,a.kt)("p",null,"On Windows you activate it with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-batch"},"$ venv\\Scripts\\activate.bat\n")),(0,a.kt)("p",null,"Use pip like usual:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ pip install -U py-cord\n")),(0,a.kt)("p",null,"Congratulations. You now have a virtual environment all set up."),(0,a.kt)("h2",{id:"additional-info"},"Additional info"),(0,a.kt)("p",null,"It can be useful to set up a requirements.txt, so you can just put all of your dependencies in there and have pip install it.\nFor instance, if you wanted to have the latest 2.0 version of pycord and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/stub42/pytz/blob/master/src/README.rst"},"pytz"),", just create a file named requirements.txt with the following contents:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"py-cord>=2.0.0\npytz\n")),(0,a.kt)("p",null,"And then (in your virtual environment) you can just execute"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install -r requirements.txt\n")),(0,a.kt)("p",null,"To keep from committing your virtual environment to git, you can set up a .gitignore file with the following line\n(assuming you named your virtual environment venv like the above example):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"venv/\n")))}v.isMDXComponent=!0}}]);