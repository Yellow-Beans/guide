"use strict";(self.webpackChunkguide_pycord_dev=self.webpackChunkguide_pycord_dev||[]).push([[349],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return m}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(a),c=i,m=u["".concat(l,".").concat(c)]||u[c]||g[c]||r;return a?n.createElement(m,o(o({ref:t},d),{},{components:a})):n.createElement(m,o({ref:t},d))}));function m(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8477:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var n=a(7462),i=a(3366),r=(a(7294),a(3905)),o=["components"],s={title:"Paginator Basics"},l="Paginator Basics",p={unversionedId:"extensions/pages/paginator-basics",id:"extensions/pages/paginator-basics",title:"Paginator Basics",description:"Page",source:"@site/docs/extensions/pages/paginator-basics.mdx",sourceDirName:"extensions/pages",slug:"/extensions/pages/paginator-basics",permalink:"/extensions/pages/paginator-basics",draft:!1,editUrl:"https://github.com/Pycord-Development/guide/tree/main/docs/extensions/pages/paginator-basics.mdx",tags:[],version:"current",lastUpdatedBy:"Lala Sabathil",lastUpdatedAt:1713441056,formattedLastUpdatedAt:"Apr 18, 2024",frontMatter:{title:"Paginator Basics"},sidebar:"defaultSidebar",previous:{title:"Pages",permalink:"/category/pages"},next:{title:"Paginator FAQ",permalink:"/extensions/pages/paginator-faq"}},d={},u=[{value:"Page",id:"page",level:2},{value:"PageGroup",id:"pagegroup",level:2},{value:"Paginator",id:"paginator",level:2},{value:"Depending on what&#39;s being passed to the <code>pages</code> parameter, the behaviour of the paginator may differ:",id:"depending-on-whats-being-passed-to-the-pages-parameter-the-behaviour-of-the-paginator-may-differ",level:4},{value:"Parameters for the <code>Paginator</code> class which have default values:",id:"parameters-for-the-paginator-class-which-have-default-values",level:4},{value:"PaginatorButton",id:"paginatorbutton",level:2},{value:"PaginatorMenu",id:"paginatormenu",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Support and Feedback",id:"support-and-feedback",level:2}],g={toc:u},c="wrapper";function m(e){var t=e.components,a=(0,i.Z)(e,o);return(0,r.kt)(c,(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"paginator-basics"},"Paginator Basics"),(0,r.kt)("h2",{id:"page"},(0,r.kt)("a",{parentName:"h2",href:"https://docs.pycord.dev/en/stable/ext/pages/index.html#page"},"Page")),(0,r.kt)("p",null,"This class contains two attributes: ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"embeds"),", which correspond to the attributes of the same name on the\n",(0,r.kt)("inlineCode",{parentName:"p"},"discord.Message")," class.\nTo create a new Page, use the following syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'import discord\npage = Page(content="My Page Content", embeds=[discord.Embed(title="My First Embed Title")])\n')),(0,r.kt)("h2",{id:"pagegroup"},(0,r.kt)("a",{parentName:"h2",href:"https://docs.pycord.dev/en/stable/ext/pages/index.html#pagegroup"},"PageGroup")),(0,r.kt)("p",null,"This class represents a group of pages. It uses most of the same parameters as ",(0,r.kt)("inlineCode",{parentName:"p"},"Paginator"),", which allows each\n",(0,r.kt)("inlineCode",{parentName:"p"},"PageGroup")," to effectively have its own settings and behaviours."),(0,r.kt)("h2",{id:"paginator"},(0,r.kt)("a",{parentName:"h2",href:"https://docs.pycord.dev/en/stable/ext/pages/index.html#paginator"},"Paginator")),(0,r.kt)("p",null,"This is the main class for ",(0,r.kt)("inlineCode",{parentName:"p"},"ext.pages"),", and is used to control most of the functionality of the extension."),(0,r.kt)("p",null,"In its most basic form, with no arguments provided (default values listed below), a paginator can be created like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="Paginator Example"',title:'"Paginator','Example"':!0},'import discord\nfrom discord.ext.pages import Paginator, Page\n\nmy_pages = [\n    Page(\n        content="This is my first page. It has a list of embeds and message content.",\n        embeds=[\n            discord.Embed(title="My First Embed Title"),\n            discord.Embed(title="My Second Embed Title"),\n        ],\n    ),\n    Page(\n        content="This is my second page. It only has message content.",\n    ),\n    Page(\n        embeds=[\n            discord.Embed(\n                title="This is my third page.",\n                description="It has no message content, and one embed.",\n            )\n        ],\n    ),\n]\npaginator = Paginator(pages=my_pages)\n')),(0,r.kt)("p",null,"The only required parameter for ",(0,r.kt)("inlineCode",{parentName:"p"},"Paginator")," is the ",(0,r.kt)("inlineCode",{parentName:"p"},"pages")," parameter, which is usually a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"Page")," objects."),(0,r.kt)("p",null,"You can also pass in a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"PageGroup")," objects, a list of strings, a list of embeds, or a list of lists of embeds."),(0,r.kt)("p",null,"Once the ",(0,r.kt)("inlineCode",{parentName:"p"},"Paginator")," instance is created, you can call either\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.pycord.dev/en/stable/ext/pages/index.html#discord.ext.pages.Paginator.send"},(0,r.kt)("inlineCode",{parentName:"a"},"Paginator.send()")),"\nor ",(0,r.kt)("a",{parentName:"p",href:"https://docs.pycord.dev/en/stable/ext/pages/index.html#discord.ext.pages.Paginator.respond"},(0,r.kt)("inlineCode",{parentName:"a"},"Paginator.respond()")),"\nto send a message or response with the paginator's contents."),(0,r.kt)("h4",{id:"depending-on-whats-being-passed-to-the-pages-parameter-the-behaviour-of-the-paginator-may-differ"},"Depending on what's being passed to the ",(0,r.kt)("inlineCode",{parentName:"h4"},"pages")," parameter, the behaviour of the paginator may differ:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Passing a list of ",(0,r.kt)("inlineCode",{parentName:"li"},"PageGroup")," objects will essentially treat each ",(0,r.kt)("inlineCode",{parentName:"li"},"PageGroup")," as its own Paginator, with most\n",(0,r.kt)("inlineCode",{parentName:"li"},"Paginator")," attributes able to be set independently for each ",(0,r.kt)("inlineCode",{parentName:"li"},"PageGroup"),".",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"-   Each `PageGroup` accepts its own `pages` parameter, which inherits the same behaviour as the `pages` parameter\nof `Paginator`, except it cannot contain other `PageGroup` objects.\n"))),(0,r.kt)("li",{parentName:"ul"},"If a page is a ",(0,r.kt)("inlineCode",{parentName:"li"},"Page")," object, this will allow you to specify both the ",(0,r.kt)("inlineCode",{parentName:"li"},"discord.Message.content")," and\n",(0,r.kt)("inlineCode",{parentName:"li"},"discord.Message.embeds")," attributes for a page.",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"-   **This is the preferred method of defining a page.**\n"))),(0,r.kt)("li",{parentName:"ul"},"If a page is a string, this will be used for the ",(0,r.kt)("inlineCode",{parentName:"li"},"discord.Message.content")," attribute. This type of page cannot have\nany embeds."),(0,r.kt)("li",{parentName:"ul"},"If a page is a list of embeds, this will be used for the ",(0,r.kt)("inlineCode",{parentName:"li"},"discord.Message.embeds")," attribute. This type of page\ncannot have any message content."),(0,r.kt)("li",{parentName:"ul"},"If a page is a list of lists of embeds, each parent list item will create a page containing all embeds from its\nchild list. This type of page cannot have any message content.")),(0,r.kt)("h4",{id:"parameters-for-the-paginator-class-which-have-default-values"},"Parameters for the ",(0,r.kt)("inlineCode",{parentName:"h4"},"Paginator")," class which have default values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"show_disabled")," ",(0,r.kt)("strong",{parentName:"li"},":")," ",(0,r.kt)("inlineCode",{parentName:"li"},"True"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Show buttons that are disabled (i.e. can't be clicked)"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"author_check")," ",(0,r.kt)("strong",{parentName:"li"},":")," ",(0,r.kt)("inlineCode",{parentName:"li"},"True"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Only the author can interact with the paginator."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timeout")," ",(0,r.kt)("strong",{parentName:"li"},":")," ",(0,r.kt)("inlineCode",{parentName:"li"},"180")," ",(0,r.kt)("em",{parentName:"li"},"(seconds)"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The paginator will time out and become inactive after this many seconds."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"disable_on_timeout")," ",(0,r.kt)("strong",{parentName:"li"},":")," ",(0,r.kt)("inlineCode",{parentName:"li"},"True"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If the paginator times out, it will be automatically disabled and all buttons will be unusable."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"use_default_buttons")," ",(0,r.kt)("strong",{parentName:"li"},":")," ",(0,r.kt)("inlineCode",{parentName:"li"},"True"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Use the default set of 4 buttons and a page indicator."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"show_indicator")," ",(0,r.kt)("strong",{parentName:"li"},":")," ",(0,r.kt)("inlineCode",{parentName:"li"},"True"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"When using the default buttons, shows a middle 5th button with the current/total page numbers.")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"For other parameters that can be set on initialization, please check the\n",(0,r.kt)("a",{parentName:"strong",href:"https://docs.pycord.dev/en/stable/ext/pages/index.html#paginator"},"API Reference"))),(0,r.kt)("h2",{id:"paginatorbutton"},(0,r.kt)("a",{parentName:"h2",href:"https://docs.pycord.dev/en/stable/ext/pages/index.html#paginatorbutton"},"PaginatorButton")),(0,r.kt)("p",null,"This class represents a button used to navigate between the pages of a paginator. It's also used to create the page\nindicator."),(0,r.kt)("p",null,"When creating your own custom buttons, you can either use this class directly or subclass it to add any additional\nfunctionality you may need."),(0,r.kt)("p",null,"To add custom buttons to the paginator instead of the default navigation buttons, you have two options to do so:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Using the ",(0,r.kt)("inlineCode",{parentName:"strong"},"custom_buttons")," parameter of ",(0,r.kt)("inlineCode",{parentName:"strong"},"Paginator"),":")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-py"},'import discord\nfrom discord.ext.pages import PaginatorButton, Paginator\n\nbuttons = [\n            PaginatorButton("first", label="<<-", style=discord.ButtonStyle.green),\n            PaginatorButton("prev", label="<-", style=discord.ButtonStyle.green),\n            PaginatorButton("page_indicator", style=discord.ButtonStyle.gray, disabled=True),\n            PaginatorButton("next", label="->", style=discord.ButtonStyle.green),\n            PaginatorButton("last", label="->>", style=discord.ButtonStyle.green),\n        ]\npaginator = Paginator(\n            pages=["Page 1", "Page 2", "Page 3"],\n            show_indicator=True,\n            use_default_buttons=False,\n            custom_buttons=buttons,\n        )\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Using ",(0,r.kt)("inlineCode",{parentName:"strong"},"Paginator.add_button()"),":")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-py"},'import discord\nfrom discord.ext.pages import PaginatorButton, Paginator\n\npaginator = Paginator(pages=["Page 1", "Page 2", "Page 3"], use_default_buttons=False)\npaginator.add_button(PaginatorButton("prev", label="<", style=discord.ButtonStyle.green))\npaginator.add_button(PaginatorButton("page_indicator", style=discord.ButtonStyle.gray, disabled=True))\npaginator.add_button(PaginatorButton("next", label=">", style=discord.ButtonStyle.green))\n')))),(0,r.kt)("p",null,"If you want to use the default navigation buttons, but not all of them, you can also use ",(0,r.kt)("inlineCode",{parentName:"p"},"Paginator.remove_button()")," to\nselectively remove them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'from discord.ext.pages import Paginator\n\npaginator = Paginator(pages=["Page 1", "Page 2", "Page 3"])\npaginator.remove_button("first")\npaginator.remove_button("last")\n')),(0,r.kt)("h2",{id:"paginatormenu"},(0,r.kt)("a",{parentName:"h2",href:"https://docs.pycord.dev/en/stable/ext/pages/index.html#paginatormenu"},"PaginatorMenu")),(0,r.kt)("p",null,"This class represents the ",(0,r.kt)("inlineCode",{parentName:"p"},"discord.Select")," menu used to navigate between ",(0,r.kt)("inlineCode",{parentName:"p"},"PageGroup")," instances. In most situations, you\nwill not need to interact with this class directly."),(0,r.kt)("p",null,"If you do subclass it, you'll likely want to call ",(0,r.kt)("inlineCode",{parentName:"p"},"super()")," in your ",(0,r.kt)("inlineCode",{parentName:"p"},"__init__")," method to ensure that the ",(0,r.kt)("inlineCode",{parentName:"p"},"PageGroup"),"\nnavigation functionality is retained."),(0,r.kt)("h2",{id:"usage-examples"},"Usage Examples"),(0,r.kt)("p",null,"For a comprehensive list of examples showing all ",(0,r.kt)("inlineCode",{parentName:"p"},"Paginator")," functionality, please see the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Pycord-Development/pycord/blob/master/examples/views/paginator.py"},"example in cog form")," in the repo."),(0,r.kt)("h2",{id:"support-and-feedback"},"Support and Feedback"),(0,r.kt)("p",null,"If you have any questions, suggestions, or feedback for ",(0,r.kt)("inlineCode",{parentName:"p"},"ext.pages"),", please join the\n",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/pycord"},"discord server")," and check out the #ext-pages channel."))}m.isMDXComponent=!0}}]);